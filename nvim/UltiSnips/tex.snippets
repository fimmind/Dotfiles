global !p
def math():
	return vim.eval("vimtex#syntax#in_mathzone()") == "1"
endglobal

################
# Environments #
################

snippet beg "begin{} / end{}" bA
\\begin{${1:environment}}$2
	${VISUAL}$0
\\end{$1}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item ${VISUAL}$0
\end{enumerate}
endsnippet

snippet enumru "Cirilic letters enumerate" b
	\begin{enumerate}[label=\asbuk*)]
		\item ${VISUAL}$0
	\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item ${VISUAL}$0
\end{itemize}
endsnippet

snippet itt "\item" bA
\item
endsnippet

snippet cntr "Center" bA
\begin{center}
	${VISUAL}$0
\end{center}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] ${VISUAL}$0
\end{description}
endsnippet

context "math()"
snippet "(p|b|v|V|B)mat" "Smart Matrix" wrA
\begin{`!p snip.rv = match.group(1)`matrix}
	${VISUAL}${1:\ldots}
\end{`!p snip.rv = match.group(1)`matrix}
endsnippet

priority 1
context "not math()"
snippet mk "Inline math" wA
\( ${VISUAL}$1 \)
endsnippet

priority 10
context "not math()"
snippet bmk "Inline math enclosed in braces" wA
\(\{ ${VISUAL}$1 \}\)
endsnippet

priority 100
context "not math()"
snippet mK "math" bA
\[
	${VISUAL}$1
\]
endsnippet

priority 10
context "not math()"
snippet mK "math" wA

\[
	${VISUAL}$1
\]$0
endsnippet

context "not math()"
snippet eq "Equation" b
\begin{equation}
	\label{eq:$1}
	${VISUAL}$0
\end{equation}
endsnippet

context "not math()"
snippet eqnn "Equation without number" bA
\begin{equation*}
	${VISUAL}$0
\end{equation*}
endsnippet

context "math()"
snippet align "Align" bA
\begin{aligned}
	${VISUAL}$1
\end{aligned}
endsnippet

context "not math()"
snippet align "Align" bA
\begin{align*}
	${VISUAL}$1
\end{align*}
endsnippet

context "not math()"
snippet mult "Multline" bA
\begin{multline*}
	${VISUAL}$1
\end{multline*}
endsnippet

context "math()"
snippet == "Equal in align" wA
&=
endsnippet

context "math()"
snippet :: ":=" wA
\coloneqq
endsnippet

context "math()"
snippet "&= >" "Implies in align" wA
&\implies
endsnippet

priority 1
context "math()"
snippet cases "Cases" wA
\begin{cases}
	${VISUAL}$1
\end{cases}
endsnippet

priority 10
context "math()"
snippet orcases "Set of equations" wA
\left[ {
	\begin{array}{@{}l@{\quad}l@{}}
		${VISUAL}$1
	\end{array}
} \right.
endsnippet

context "math()"
snippet gath "gathered" bA
\begin{gathered}
	${VISUAL}$1
\end{gathered}
endsnippet

context "not math()"
snippet gath "gather" bA
\begin{gather*}
	${VISUAL}$1
\end{gather*}
endsnippet

context "math()"
snippet TT "text" wA
\text{${VISUAL}$1}
endsnippet

snippet bf "textbf" w
\textbf{${VISUAL}$1}
endsnippet

snippet it "textit" w
\textit{${VISUAL}$1}
endsnippet

#########
# Paren #
#########
context "math()"
snippet lra "\langle \rangle" iA
\langle ${VISUAL}$1 \rangle
endsnippet

context "math()"
snippet lrA "\left\langle \right\rangle" iA
\left\langle ${VISUAL}$1 \right\rangle
endsnippet

context "math()"
snippet lA "\langle" iA
\langle
endsnippet

context "math()"
snippet rA "\rangle" iA
\rangle
endsnippet

context "math()"
snippet lrm "\left| \right|" iA
\left| ${VISUAL}$1 \right|
endsnippet

context "math()"
snippet lrp "\left( \right)" iA
\left( ${VISUAL}$1 \right)
endsnippet

context "math()"
snippet lrb "\left[ \right]" iA
\left[ ${VISUAL}$1 \right]
endsnippet

context "math()"
snippet lrB "\left{ \right}" iA
\left\\{ ${VISUAL}$1 \right\\}
endsnippet

##############
# Puctuation #
##############
context "math()"
snippet ,, "Comma in cases" iA
, &
endsnippet

snippet ... "\dots" iA
\ldots
endsnippet

############
# Sections #
############

snippet prt "Part" b
\part{$1}
\label{prt:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

endsnippet

snippet cha "Chapter" b
\chapter{$1}
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

endsnippet

snippet sc "Section" b
\section{$1}
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

endsnippet

snippet sub "Subsection" b
\subsection{$1}
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

endsnippet

snippet ssub "Subsubsection" b
\subsubsection{$1}
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

endsnippet

snippet par "Paragraph" b
\paragraph{$1}
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

endsnippet

snippet subp "Subparagraph" b
\subparagraph{$1}
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

endsnippet


snippet prtnl "Part no label" bA
\part{$1}
endsnippet

snippet chanl "Chapter no label" ibA
\chapter{$1}
endsnippet

snippet scnl "Section no label" bA
\section{$1}
endsnippet

snippet subnl "Subsection no label" bA
\subsection{$1}
endsnippet

snippet ssubnl "Subsubsection no label" bA
\subsubsection{$1}
endsnippet

snippet parnl "Paragraph no label" bA
\paragraph{$1}
endsnippet

snippet subpnl "Subparagraph no label" bA
\subparagraph{$1}
endsnippet

snippet lbl "label" bA
\label{$1}
endsnippet

############
# Packages #
############

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}
endsnippet

snippet pacna "Package without arguments" bA
\usepackage{$1}
endsnippet

###########
# Spacing #
###########

snippet "(\S\s+)\sq" "\quad" wrA
`!p snip.rv = match.group(1)`\quad
endsnippet

snippet "(\S\s+)\s:" "\quad" wrA
`!p snip.rv = match.group(1)`\:
endsnippet

snippet \quadq "\qquad" wA
\\qquad
endsnippet

snippet pph "\phantom{...}" wA
\\phantom{$1}
endsnippet

snippet hfl "\hfill" wA
\\hfill
endsnippet

priority 100
snippet \= "\\ =" iA
\\\\
&${1:=}
endsnippet

priority 1000
snippet \\= "\\\\ =" iA
\\\\\\\\
=
endsnippet

#############
# Fractions #
#############

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}
endsnippet

context "math() and snip.visual_text"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}
endsnippet

context "math()"
snippet '([\\A-Za-z'_^\d\.]+)/' "Fraction" irA
\\frac{`!p snip.rv = match.group(1)`}{$1}
endsnippet

priority 1000
context "math()"
snippet '(^.*\))/' "() Fraction" irA
`!p
stripped = match.group(1)
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	elif stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1} $0
endsnippet

#############
# Subscript #
#############

context "math()"
snippet "([A-Za-z'])(\d)" "auto subscript" irA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "([A-Za-z'])_(\d\d)" "auto subscript 2" irA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}
endsnippet

context "math()"
snippet __ "subscript" iA
_{${VISUAL}$1}
endsnippet

priority 10
context "math()"
snippet "([a-zA-Z'])([ijklmn])\2" "letter subscript" irA
`!p snip.rv = match.group(1) + "_" + match.group(2)`
endsnippet

priority 100
context "math()"
snippet eL "\ell" iA
\ell
endsnippet

context "math()"
snippet ++ "_+" iA
_+
endsnippet

context "math()"
snippet -- "_-" iA
_-
endsnippet

###################
# Large operators #
###################

priority 100
context "math()"
snippet "d\\int" "definite integral" wrA
\int_{${1:-\infty}}^{${2:\infty}} $0
endsnippet

context "math()"
snippet "(?<!\\:)(?<=\S)(\s*d\w?)\." "\: dx" wrA
\:`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet "(?<!\\)sum" "sum" wrA
\sum_{${1:i}=${2:0}}^{${3:n}} ${VISUAL}$0
endsnippet

context "math()"
snippet "(?<!\\)prod" "product" wrA
\prod_{${1:n} = ${2:1}}^{${3:\infty}} ${VISUAL}$0
endsnippet

context "math()"
snippet "(?<!\\)lim" "limit" wrA
\lim_{${1:n} \to ${2:\infty}} ${VISUAL}$0
endsnippet

####################
# Powers and roots #
####################

priority 10
context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${VISUAL}$1}
endsnippet

priority 100
context "math()"
snippet nsr "sqrt" iA
\sqrt[$1]{${VISUAL}$2}
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet qb "^3" iA
^3
endsnippet

context "math()"
snippet tp "to the power" iA
^{$1}
endsnippet

############
# Symmbols #
############

priority 10
context "math()"
snippet "(?<!\\)(sim|pi|perp|to|in|iff|star|land|lor|lnot|neq)" "Symbols" rwA
\\`!p snip.rv = match.group(0)`
endsnippet

priority 100
context "math()"
snippet mto "\mapsto" wA
\\mapsto
endsnippet

context "math()"
snippet "\sim eq" "\simeq" wA
\simeq
endsnippet

context "math()"
snippet "(?<!\\)not" "\not" rwA
\not
endsnippet

context "math()"
snippet tto "Approaches ... as ... approaches ..." wA
\underset{${1:x} \to ${2:\infty}}\longrightarrow
endsnippet

context "math()"
snippet jJ "function composition (\circ)" wA
\circ
endsnippet

priority 10
context "math()"
snippet <| "\triangleleft" wA
\triangleleft
endsnippet

priority 100
context "math()"
snippet "\\not\<\|" "\ntriangleleft" wrA
\ntriangleleft
endsnippet

priority 10
context "math()"
snippet |> "\triangleright" wA
\triangleright
endsnippet

priority 100
context "math()"
snippet "\\not\|>" "\ntriangleright" wrA
\ntriangleright
endsnippet

context "math()"
snippet o+ "\oplus" wA
\oplus
endsnippet

context "math()"
snippet "(?<!\\)prop" "proportional to" wrA
\propto
endsnippet

context "math()"
snippet +- "Plus Minus" wA
\pm
endsnippet

context "math()"
snippet -+ "Minus Plus" wA
\mp
endsnippet

context "math()"
snippet xx "Times" wA
\times
endsnippet

priority 10
context "math()"
snippet ** "cdot" wA
\cdot
endsnippet

context "math()"
snippet *.. "cdots" wA
\cdots
endsnippet

priority 100
context "math()"
snippet V** "\dot V_{} ()" wA
\dot V_{${1:\delta}}(${2:a})
endsnippet

context "math()"
snippet VV "V_{} ()" wA
V_{${1:delta}}(${2:a})
endsnippet

context "math()"
snippet ~= "approx" wA
\approx
endsnippet

context "math()"
snippet uu "U" wA
\cup
endsnippet

context "math()"
snippet UU "U" wA
\bigcup_{$1}^{$2}
endsnippet

context "math()"
snippet CA "cap" wA
\cap
endsnippet

context "math()"
snippet Ca "big cap" wA
\bigcap_{$1}^{$2}
endsnippet

context "math()"
snippet || "mid" wA
\mid
endsnippet

context "math()"
snippet cc "subset" wA
\subset
endsnippet

context "math()"
snippet ncc "not subset" wA
\not\subset
endsnippet

context "math()"
snippet NN "Natural" wA
\mathbb N
endsnippet

context "math()"
snippet ZZ "Integer" wA
\mathbb Z
endsnippet

context "math()"
snippet QQ "Rational" wA
\mathbb Q
endsnippet

context "math()"
snippet RR "Real" wA
\mathbb R
endsnippet

context "math()"
snippet II "Irrational" wA
\mathbb I
endsnippet

context "math()"
snippet CC "Complex" wA
\mathbb C
endsnippet

context "math()"
snippet LL "Linear span" wA
\mathscr L (${VISUAL}$1)
endsnippet

context "math()"
snippet PP "Antiderivatives set" wA
\mathscr P_${1:f}
endsnippet

context "math()"
snippet FF "A field" wA
\mathrm F
endsnippet

context "math()"
snippet scr "\mathscr" wA
\mathscr
endsnippet

priority 100
context "math()"
snippet mset "set minus" wA
\setminus
endsnippet

priority 10
context "math()"
snippet set "\{ ... \}" wA
\left\\{ ${VISUAL}$1 \right\\}
endsnippet

priority 100
context "math()"
snippet bset "big \{ ... \}" wA
\\Big\\{ ${VISUAL}$1 \Big\\}
endsnippet

context "math()"
snippet prl "parallel" wA
\parallel
endsnippet

context "math()"
snippet oo "\infty" wA
\infty
endsnippet

priority 10
context "math()"
snippet EE "exist" wA
\exists
endsnippet

priority 100
context "math()"
snippet "\\notEE" "does not exist" wrA
\nexists
endsnippet

context "math()"
snippet AA "forall" wA
\forall
endsnippet

priority 10
context "math()"
snippet "(?<!<)=>" "implies" wrA
\implies
endsnippet

priority 10
context "math()"
snippet "(?<!<)=<" "implied by" wrA
\impliedby
endsnippet

context "math()"
snippet "(?<!\\)impl" "implies" wrA
\implies
endsnippet

context "math()"
snippet \\impliesdef "implies by definition" wA
\overset{\!\!\text{\tiny def}}\implies
endsnippet

priority 100
context "math()"
snippet \\iffdef "if and only iff (by definition)" wA
\overset{\hspace{-1pt}\text{\tiny def}}\iff
endsnippet

context "math()"
snippet =def "equals by definition" wA
\overset{\text{def}}=
endsnippet

context "math()"
snippet != "not equals" wA
\neq
endsnippet

context "math()"
snippet "(?<!\\)geq|>=" "less than or equals to" wrA
\geqslant
endsnippet

context "math()"
snippet "(?<!\\)leq|<=" "greater than or equals to" wrA
\leqslant
endsnippet

context "math()"
snippet "!-" "monotonic (increasing)" wrA
\!\!\nearrow
endsnippet

priority 1000
context "math()"
snippet "\\!\\!\\nearrow-" "monotonic (strictly increasing)" wrA
\!\!\nearrow\!\nearrow
endsnippet

###############
# Oversymbols #
###############

priority 100
context "math()"
snippet "([\\A-Za-z'_^\d\.]+(?<!\\))bar" "bar" rwA
\overline{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "(?<!\\)bar" "bar" rwA
\overline{${VISUAL}$1}
endsnippet

priority 100
context "math()"
snippet "([\\A-Za-z'_^\d\.]+(?<!\\))hat" "vector" rwA
\hat{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "(?<!\\)hat" "hat" rwA
\hat{${VISUAL}$1}
endsnippet

priority 100
context "math()"
snippet "([\\A-Za-z'_^\d\.]+(?<!\\))vec" "vector" rwA
\overrightarrow{`!p snip.rv = match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(?<!\\widetilde )(?<![\\A-Za-z])(\\?[A-Za-z]+)~" "tilde" rwA
\tilde `!p snip.rv = match.group(1)`
endsnippet

priority 1000
context "math()"
snippet "\\tilde (\\?[A-Za-z]+)~" "widetilde" rwA
\widetilde `!p snip.rv = match.group(1)`
endsnippet

priority 10
context "math()"
snippet ~~ "\widetilde" wA
\widetilde
endsnippet

context "math()"
snippet .~ "\tilde" wA
\tilde
endsnippet

context "math()"
snippet "([A-Z])cl" "\mathcal [A-Z]" rwA
\mathcal `!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet "([A-Za-z]+)fk" "\mathfrak ..." rwA
\mathfrak{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet "([A-Za-z]+)bf" "\mathbf ..." rwA
\mathbf{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "(?<!\\)vec" "vector" rwA
\overrightarrow{${VISUAL}$1}
endsnippet

priority 10
context "math()"
snippet bU "Underbrace" wA
\underbrace{${VISUAL}$1}_{$2}
endsnippet

priority 10
context "math()"
snippet '([\\A-Za-z'_^\d\.]+)bU' "Underbrace" irA
\underbrace{`!p snip.rv = match.group(1)`}_{$1}
endsnippet

priority 100
context "math()"
snippet '(^.*\))bU' "() Underbrace" irA
`!p
stripped = match.group(1)
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	elif stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\underbrace{" + stripped[i:] + "}"
`_{$1} $0
endsnippet

priority 1000
context "math() and snip.visual_text"
snippet BB "Visual underbrace" wA
\underbrace{${VISUAL}}_{$1}
endsnippet

priority 10
context "math()"
snippet ove "Overset" wA
\overset{$1}_{$2}
endsnippet

priority 100
context "math()"
snippet '([\\A-Za-z'_^\d\.=]+)ove' "Overset" irA
\overset{$1}{`!p snip.rv = match.group(1)`}
endsnippet

priority 1000
context "math() and snip.visual_text"
snippet ove "Visual overset" wA
\overset{$1}{${VISUAL}}
endsnippet

priority 10
context "math()"
snippet und "Underset" wA
\underset{$1}_{$2}
endsnippet

priority 100
context "math()"
snippet '([\\A-Za-z'_^\d\.=]+)und' "Underset" irA
\underset{$1}{`!p snip.rv = match.group(1)`}
endsnippet

priority 1000
context "math() and snip.visual_text"
snippet und "Visual underset" wA
\underset{$1}{${VISUAL}}
endsnippet

#############
# Operators #
#############

context "math()"
snippet '(?<!\\)(lg|ln|log|exp|deg|min|max|dim|ker|det)' "operators" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet "\\?([A-Za-z]+)O" "\operatorname {...}" wrA
\operatorname{`!p snip.rv = match.group(1)`}
endsnippet

priority 100
context "math()"
snippet '(?<!\\)((arc)?(sin|cos|tan|cot|sec|csc))' "trigonometry" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 1000
context "math()"
snippet '\\?(a(sin|cos|tan|cot|sec|csc))' "inverse trigonometry" rwA
\\arc`!p snip.rv = match.group(2)`
endsnippet

#########
# Greek #
#########

context "math()"
snippet DD "Delta" wA
\Delta
endsnippet

#####################
# Other expressions #
#####################

context "math()"
snippet Cnk "Binomial coefficient" wA
C_n^k
endsnippet

context "math()"
snippet fun "a function" wA
${1:${2:D} \subset \mathbb R} \to ${3:\mathbb R}
endsnippet

########
# Anki #
########

snippet note "Anki's note" b
\begin{note}{`!p
from uuid import uuid4
if not snip.c:
	snip.rv = uuid4().hex
`}
	${VISUAL}$1
\end{note}
endsnippet

context "snip.visual_text"
snippet clz "Cloze deletion" wA
\begin{cloze}{${1:1}}
	${VISUAL}
\end{cloze}
endsnippet

snippet clz "Cloze deletion" wA
\begin{cloze}{${1:1}}
	$2
\end{cloze}
endsnippet

snippet iclz "Inline cloze deletion" wA
\begin{icloze}{${1:1}}$2\end{icloze}
endsnippet

context "snip.visual_text"
snippet iclz "Inline cloze deletion" wA
\begin{icloze}{${1:1}}${VISUAL}\end{icloze}
endsnippet

snippet Iclz "Inline cloze deletion with newlines" wA
\begin{icloze}{${1:1}}
	$2
\end{icloze}
endsnippet

context "snip.visual_text"
snippet Iclz "Inline cloze deletion with newlines" wA
\begin{icloze}{${1:1}}
	${VISUAL}
\end{icloze}
endsnippet
