#!/usr/bin/env python3
"""Simple script for converting LaTeX into Anki's apkg files"""

import html
import re
import sys
import textwrap
import typing
import warnings
import yaml

import genanki
from pydantic import BaseModel
from pydantic import ValidationError


class LatexConf(BaseModel):
    """Anki's LaTeX configuration model"""
    pre: str = genanki.Model.DEFAULT_LATEX_PRE
    post: str = genanki.Model.DEFAULT_LATEX_POST
    svg: bool = False


class TemplateConf(BaseModel):
    """Anki's card template configuration model"""
    front: str = genanki.CLOZE_MODEL.templates[0]["qfmt"]
    back: str = genanki.CLOZE_MODEL.templates[0]["afmt"]
    css: str = genanki.CLOZE_MODEL.css


class ModelConf(BaseModel):
    """genanki.Model configuration model"""
    template: TemplateConf = TemplateConf()
    latex: LatexConf = LatexConf()
    id: int
    name: str


class DeckConf(BaseModel):
    """Anki's deck identifiers model"""
    name: str
    description: str = ""
    source_files: typing.List[str] = []


class ConfigModel(BaseModel):
    """Configuration file model"""
    decks: typing.Dict[int, DeckConf] = {}
    output_file: str = "out.apkg"
    model: ModelConf

    @staticmethod
    def unsafe_load():
        """Cusotom parsing method without error handling"""
        with open("tex_to_anki.yaml", "r", encoding="utf8") as config_file:
            return ConfigModel.parse_obj(
                yaml.load(
                    config_file,
                    Loader=yaml.SafeLoader,
                ))

    @staticmethod
    def load():
        """Cusotom parsing method"""
        try:
            return ConfigModel.unsafe_load()
        except ValidationError as exception:
            print(
                "\033[91merror:\033[0m ",
                "Failed to parse configuration file:",
            )
            for error in exception.errors():
                path = " -> ".join(error["loc"])
                msg = error["msg"]
                print(f'  {path}:\t {msg}')
            sys.exit(1)


CONFIG = ConfigModel.load()


class NoteModel(genanki.Model):
    """A wrapper for genanki.Model"""
    latexsvg: bool

    def __init__(self):
        super().__init__(
            model_id=CONFIG.model.id,
            name=CONFIG.model.name,
            fields=[{
                'name': name
            } for name in ['UUID', 'Text', 'Back Extra']],
            templates=[{
                'name': 'Cloze',
                'qfmt': CONFIG.model.template.front,
                'afmt': CONFIG.model.template.back,
            }],
            css=CONFIG.model.template.css,
            model_type=genanki.Model.CLOZE,
            latex_pre=CONFIG.model.latex.pre,
            latex_post=CONFIG.model.latex.post,
            sort_field_index=0,
        )
        self.latexsvg = CONFIG.model.latex.svg

    def to_json(self, timestamp: float, deck_id):
        res = super().to_json(timestamp, deck_id)
        res["latexsvg"] = self.latexsvg
        return res


NoteModel = NoteModel()


class Note(genanki.Note):
    """A wapper for genanki.Note"""

    _due_counter = 0

    def __init__(
        self,
        uuid: str,
        text: str,
        back_extra: str = "",
        *,
        tags: [str] or None = None,
    ):
        Note._due_counter += 1
        super().__init__(
            model=NoteModel,
            fields=[uuid, text, back_extra],
            guid=genanki.guid_for(uuid),
            tags=tags,
            due=Note._due_counter,
        )

    def reset_due_counter():
        Note._due_counter = 0


class OutputDeck(genanki.Deck):
    """A wrapper around genanki.Deck"""

    def add_notes(self, notes: [Note]):
        """Add multiple notes to the deck"""
        for note in notes:
            self.add_note(note)


class TeXParser:
    """TeX input file parser"""

    _cloze_regex = re.compile(
        r"(?s)\\begin\{cloze\}\{(\d+)\}.*?\\end\{cloze\}")
    _inline_cloze_regex = re.compile(
        r"(?s)\\begin\{icloze\}\{(\d+)\}.*?\\end\{icloze\}")
    _hinted_cloze_regex = re.compile(
        r"(?s)\\begin\{cloze\}\[(.*?)\]\{(\d+)\}.*?\\end\{cloze\}")
    _note_regex = re.compile(r"(?s)\\begin\{note\}\{(.+?)\}(.*?)" +
                             r"(?:\\begin\{extra\}(.+?)\\end\{extra\})?\s*" +
                             r"\\end\{note\}")

    def parse_notes(self, source: str) -> [Note]:
        """Parse all the notes from file specified by CONFIG.source_file"""
        notes = []
        for [uuid, note, extra] in re.findall(self._note_regex, source):
            notes.append(
                Note(
                    uuid,
                    self.preprocess_tex(note),
                    self.preprocess_tex(extra),
                ))
        return notes

    def preprocess_tex(self, text: str) -> str:
        """Ensure that the given piece of TeX conforms Anki's syntax rules"""
        text = textwrap.dedent(text).strip()
        if not text:
            return text

        # https://github.com/kerrickstaley/genanki#my-field-data-is-getting-garbled
        text = html.escape(text)

        # https://docs.ankiweb.net/math.html#cloze-conflicts
        text = re.sub(r"(?<=\{)\{", r"<!-- -->{", text)
        text = re.sub(r"\}(?=\})", r"}<!-- -->", text)
        text = re.sub(r":(?=:)", r":<!-- -->", text)

        text = re.sub(self._hinted_cloze_regex, r"{{c\2::\g<0>:: \1 }}", text)
        text = re.sub(self._cloze_regex, r"{{c\1::\g<0><!-- -->}}", text)
        text = re.sub(
            self._inline_cloze_regex,
            r"{{c\1::\g<0><!-- -->}}",
            text,
        )

        return f'[latex]<pre>{text}</pre>[/latex]'


TeXParser = TeXParser()

if __name__ == "__main__":
    # Ignore genanki's complains about comments being ivalid HTML tags
    warnings.filterwarnings(
        "ignore",
        message=r".*<!-- -->",
        module="genanki",
    )

    decks = []
    for (deck_id, deck_conf) in CONFIG.decks.items():
        deck = OutputDeck(deck_id, deck_conf.name, deck_conf.description)
        Note.reset_due_counter()
        for source_fname in deck_conf.source_files:
            with open(source_fname, "r", encoding="UTF-8") as source_file:
                source = source_file.read()
                notes = TeXParser.parse_notes(source)
                deck.add_notes(notes)
        decks.append(deck)
    genanki.Package(decks).write_to_file(CONFIG.output_file)
