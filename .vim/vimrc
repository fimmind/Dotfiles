" *******************************************
"
"  ██▒   █▓ ██▓ ███▄ ▄███▓ ██▀███   ▄████▄
" ▓██░   █▒▓██▒▓██▒▀█▀ ██▒▓██ ▒ ██▒▒██▀ ▀█
"  ▓██  █▒░▒██▒▓██    ▓██░▓██ ░▄█ ▒▒▓█    ▄
"   ▒██ █░░░██░▒██    ▒██ ▒██▀▀█▄  ▒▓▓▄ ▄██▒
"    ▒▀█░  ░██░▒██▒   ░██▒░██▓ ▒██▒▒ ▓███▀ ░
"    ░ ▐░  ░▓  ░ ▒░   ░  ░░ ▒▓ ░▒▓░░ ░▒ ▒  ░
"    ░ ░░   ▒ ░░  ░      ░  ░▒ ░ ▒░  ░  ▒
"      ░░   ▒ ░░      ░     ░░   ░ ░
"
" *******************************************


call plug#begin('~/.vim/plugged')
  " Syntax, style
  Plug 'phaazon/gruvbox' " Not original, couse of haskell-vim support
  Plug 'suy/vim-qmake'
  Plug 'justinmk/vim-syntax-extra'
  Plug 'PotatoesMaster/i3-vim-syntax'

  " Haskell
  Plug 'neovimhaskell/haskell-vim'

  " Markdown
  Plug 'SidOfc/mkdx'
  Plug 'dhruvasagar/vim-table-mode'
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }

  " NERDTree
  Plug 'scrooloose/nerdtree'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'jistr/vim-nerdtree-tabs'

  " Tools
  Plug 'airblade/vim-gitgutter'
  Plug 'junegunn/vim-easy-align'
  Plug 'godlygeek/tabular'
  Plug 'mattn/webapi-vim'
  Plug 'mattn/gist-vim'
  Plug 'markonm/traces.vim'

  " Motion
  Plug 'matze/vim-move'
  Plug 'easymotion/vim-easymotion'
  Plug 'kien/ctrlp.vim'
  Plug 'vim-scripts/a.vim'

  " Format code
  Plug 'google/vim-maktaba'
  Plug 'google/vim-codefmt'
  Plug 'google/vim-glaive'

  " Autocompletion
  Plug 'cohama/lexima.vim'
  Plug 'lervag/vimtex'
  Plug 'SirVer/ultisnips'
  Plug 'vim-scripts/vim-auto-save'
  Plug 'davidhalter/jedi-vim'

  function! BuildYCM(info)
    if(has("unix"))
      if(system("uname -o") == "Android\n")
        !./install.py --clang-completer --system-libclang
      else
        !./install.py --clangd-completer
      endif
    else
      !echo "Only Unix is supported" && exit 1
    endif
  endfunction
  Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

call plug#end()

" Number lines
" ================================================
set number
set relativenumber
autocmd! CmdlineLeave * call SetRelativenumber(1)
nnoremap : :call SetRelativenumber(0)<CR>:
inoremap <C-o>: <C-o>:call SetRelativenumber(0)<CR><C-o>:
inoremap <C-o> <C-o>

function SetRelativenumber(yes)
  if &number
    if a:yes
      set relativenumber
    else
      set norelativenumber
    endif
  endif
endfunction


" Haskell
" ================================================
let chars = {
      \ '-': ['{\%#}'],
      \ '#': ['{-\%#-}'],
      \ '<Space>': ['{-\%#-}', '{-#\%##-}']
      \ }

for char in keys(chars)
  for at in chars[char]
    call lexima#add_rule({
          \ 'filetype': 'haskell',
          \ 'char': char,
          \ 'at': at,
          \ 'input_after': char
          \ })
  endfor
endfor

for at in ['{-\%#-}', '{-#\%##-}', '{- \%# -}', '{-# \%# #-}']
  call lexima#add_rule({
        \ 'filetype': 'haskell',
        \ 'char': '<BS>',
        \ 'at': at,
        \ 'delete': 1
        \ })
endfor

" Easy-align
" ================================================
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" UltiSnips
" ================================================
let g:UltiSnipsEditSplit='vertical'
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"

" YouCompleteMe
" ================================================
let g:ycm_min_num_of_chars_for_completion = 2

let g:ycm_key_list_select_completion = ['<C-n>']
let g:ycm_key_list_previous_completion = ['<C-p>']

" Indent
" ================================================
filetype indent on
set autoindent
set expandtab
autocmd! FileType *
      \ set tabstop=2
      \ | set shiftwidth=2
autocmd! FileType cpp,c
      \ set tabstop=4
      \ | set shiftwidth=4

" Other settings
" ================================================
set splitright
set wrap
set hlsearch
set showmatch
set termencoding=utf-8
set ch=1
set title
set wildmenu
set splitbelow
set nobackup
set showcmd
filetype plugin on
filetype plugin indent on

" Theme
" ================================================
set termguicolors
colorscheme gruvbox
set background=dark
syntax on

" LaTeX
" ================================================
let g:tex_flavor='latex'
let g:Tex_GotoError = 0
let g:vimtex_view_method = 'zathura'
let g:AutoPairsIgnorePrefixes = ['\', 'lr', '\left']

if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

let pairs = {'(':')', '\\\\{':'\\\\}', '[':']', '<':'>'}
for i in keys(pairs)
  call lexima#add_rule({
        \ 'char': i[-1:],
        \ 'at': 'lr\%#',
        \ 'filetype': 'tex',
        \ 'input': '<BS><BS> <Esc>:call UltiSnips#Anon("\\left'.i.' $1 \\right'.pairs[i].'$0")<CR>'
        \ })
endfor

" Markdown
" ================================================
let g:mkdx#settings     = { 'highlight': { 'enable': 1 },
                        \ 'enter': { 'shift': 1 },
                        \ 'links': { 'external': { 'enable': 1 } },
                        \ 'toc': { 'text': 'Table of Contents', 'update_on_write': 1 },
                        \ }
let g:polyglot_disabled = ['markdown']
let g:mkdp_auto_start = 1
let g:mkdp_auto_close = 1

function MDOpen(url)
  exec "!google-chrome-stable '--app=".a:url."' || chromium '--app=".a:url."'" | redraw!
endfunction
let g:mkdp_browserfunc = 'MDOpen'

" Mappings
" ================================================
let g:move_key_modifier='S'

let g:mapleader=','
map \ <Plug>(easymotion-prefix)

" NERDTree
" ================================================
command! CloseTree :NERDTreeClose
noremap <C-\> :NERDTreeToggle<CR>
inoremap <C-\> <Esc>:NERDTreeToggle<CR>a
command! -nargs=1 Where :NERDTreeFind <args>

function! StartUp()
  if argc() == 0
    NERDTree
  endif
endfunction

autocmd! VimEnter * call StartUp()

" let g:NERDTreeIndicatorMapCustom = {
" \ "Modified"  : "✹",
" \ "Staged"    : "✚",
" \ "Untracked" : "✭",
" \ "Renamed"   : "➜",
" \ "Unmerged"  : "═",
" \ "Deleted"   : "✖",
" \ "Dirty"     : "✗",
" \ "Clean"     : "✔︎",
" \ "Ignored"   : "☒",
" \ "Unknown"   : "?"
" \ }

" Build & Run
" ================================================
let s:buildCommands = {
      \ "c"    : "(test -f '%:p:h/Makefile' || cmake '%:p:h') && make -f '%:p:h/Makefile'",
      \ "scss" : "sass --watch '%:p:%:p:r.css' --scss --style compressed --no-cache --sourcemap=none",
      \ "hs"   : "stack build"
      \ }
let s:runCommands = {
      \ "c"  : "test -f '%:p:r' && '%:p:r' || '%:p:h/main'",
      \ "py" : "python3 '%:p'",
      \ "js" : "node '%:p'",
      \ "hs" : "stack run"
      \ }

function! Eq(fst, snd)
  let s:buildCommands[a:fst] = s:buildCommands[a:snd]
  let s:runCommands[a:fst]   = s:runCommands[a:snd]
endfunction

call Eq("h",   "c" )
call Eq("cpp", "c" )
call Eq("hpp", "c" )
call Eq("hsl", "hs")

" Build
" ================================================
command! Build execute Build()
function! Build()
  let FileType = expand("%:e")
  if has_key(s:buildCommands, FileType)
    wa | cd %:p:h
    execute "! " . s:buildCommands[FileType]
  else
    echo "Cant build .".FileType." file"
  endif
endfunction

" Run
" ================================================
nnoremap <Leader>e :call Run()<CR>
command! Run execute Run()
function! Run()
  let FileType = expand("%:e")
  if has_key(s:runCommands, FileType)
    wa | cd %:p:h
    if has_key(s:buildCommands, FileType)
      execute "!".
            \ "clear && ".
            \ s:buildCommands[FileType]." && ".
            \ "clear && ".
            \ s:runCommands[FileType]
    else
      execute "!clear && ".s:runCommands[FileType]
    endif
  else
    echo "cant run .".FileType." file"
  endif
endfunction
